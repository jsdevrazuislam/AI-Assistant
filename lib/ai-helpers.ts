import type { Expenses, FinanceIncome, Task } from "@/lib/types"
import OpenAI from "openai";
import { extractScheduleFromResponse } from "@/lib/utils";

const client = new OpenAI({
  baseURL: 'https://openrouter.ai/api/v1',
  apiKey: process.env.NEXT_PUBLIC_APP_TOKEN,
  dangerouslyAllowBrowser: true,
});


const taskPrompt = (tasks: Task[]) => `
рждрзБржорж┐ ржПржХржЬржи ржжржХрзНрж╖ ржЯрж╛ржЗржо ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ ржХрзЛржЪред

ржЖржорж╛рж░ ржЖржЬржХрзЗрж░ ржХрж╛ржЬржЧрзБрж▓рзЛрж░ ржПржХржЯрж┐ рждрж╛рж▓рж┐ржХрж╛ ржирж┐ржЪрзЗ ржжрзЗржУрзЯрж╛ рж╣рж▓рзЛ:

${tasks.map((task, i) =>
  `${i + 1}. ржХрж╛ржЬрзЗрж░ ржирж╛ржо: ${task.title || "Unnamed Task"} тАФ ржкрзНрж░рж╛ржзрж╛ржирзНржп (Priority): ${task.priority || "Medium"}`
).join("\n")}

ржПржЦржи ржЙржкрж░рзЛржХрзНржд ржХрж╛ржЬржЧрзБрж▓рзЛржХрзЗ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ рж╕ржХрж╛рж▓ рзоржЯрж╛ ржерзЗржХрзЗ рж░рж╛ржд рззрзжржЯрж╛ ржкрж░рзНржпржирзНржд ржПржХржЯрж┐ ржХрж╛рж░рзНржпржХрж░рзА ржЯрж╛ржЗржо рж╢рж┐ржбрж┐ржЙрж▓ рждрзИрж░рж┐ ржХрж░рзЛред  
рж╢рж┐ржбрж┐ржЙрж▓рзЗ ржирж┐ржЪрзЗрж░ ржмрж┐рж╖рзЯржЧрзБрж▓рзЛ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рждрзЗ рж╣ржмрзЗ:

- Deep work block (ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржХрж╛ржЬрзЗ ржлрзЛржХрж╛рж╕ ржХрж░рж╛рж░ ржЬржирзНржп)
- Light task block (рж╕рж╣ржЬ ржХрж╛ржЬ)
- Break ржУ Lunch
- ржпржжрж┐ ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ рж╣рзЯ, ржЫрзЛржЯ ржЫрзЛржЯ ржорж┐ржЯрж┐ржВ ржЯрж╛ржЗржо
- Task priority ржЕржирзБржпрж╛рзЯрзА ржХрж╛ржЬ рж╕рж╛ржЬрж╛ржирзЛ

**Output Format:**  
ржПржХржЯрж┐ ржЯрж╛ржЗржо рж╢рж┐ржбрж┐ржЙрж▓ рждрзИрж░рж┐ ржХрж░рзЛ ржпрж╛ Array of Strings ржЖржХрж╛рж░рзЗ ржерж╛ржХржмрзЗред  

рж╢рзБржзрзБ Array of Strings рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЛ, ржмрзНржпрж╛ржЦрзНржпрж╛рж░ ржкрзНрж░рзЯрзЛржЬржи ржирзЗржЗред
`;

export const createFinancePrompt = (income: FinanceIncome[], expenses: Expenses[]) => {
  const incomeText = income.map(
    (i, idx) => `${idx + 1}. ${i.source} - ${i.amount} ржЯрж╛ржХрж╛ - ${i.date}`
  ).join("\n");

  const expenseText = expenses.map(
    (e, idx) => `${idx + 1}. ${e.category} - ${e.amount} ржЯрж╛ржХрж╛ - ${e.date}`
  ).join("\n");

  return `
ржЖржорж╛рж░ ржмрзНржпржпрж╝ ржПржмржВ ржЖржпрж╝рзЗрж░ ржбрж╛ржЯрж╛ ржирж┐ржЪрзЗ ржжрзЗржУрзЯрж╛ рж╣рж▓рзЛ:

ржЖрзЯржГ
${incomeText}

ржмрзНржпржпрж╝ржГ
${expenseText}

ржПржЗ ржбрж╛ржЯрж╛рж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ ржЖржорж╛рж░ ржЬржирзНржп ржХрж┐ржЫрзБ ржЖрж░рзНржерж┐ржХ ржкрж░рж╛ржорж░рзНрж╢ ржжрж╛ржУред ржпрзЗржоржиржГ 
- ржЖржорж┐ ржХрзЛржерж╛ржпрж╝ ржЦрж░ржЪ ржХржорж╛рждрзЗ ржкрж╛рж░рж┐?
- ржХрзЛржи ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐рждрзЗ ржмрзЗрж╢рж┐ ржЦрж░ржЪ рж╣ржЪрзНржЫрзЗ?
- ржнржмрж┐рж╖рзНржпрждрзЗрж░ ржЬржирзНржп ржХрж┐ ржзрж░ржирзЗрж░ ржмрж╛ржЬрзЗржЯрж┐ржВ ржЯрж┐ржкрж╕ ржжрж┐рждрзЗ ржкрж╛рж░рзЛ?

рзк-рзлржЯрж┐ ржкрж░рж╛ржорж░рзНрж╢ ржжрж╛ржУ, ржпрж╛рждрзЗ ржЖржорж┐ рж╕рж╣ржЬрзЗ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ред array of strings рж╣рж┐рж╕рзЗржмрзЗ ржжрж╛ржУ`
}

export const generateAISchedule = async (tasks: Task[]) => {


  const prompt = taskPrompt(tasks);

  const response = await client.chat.completions.create({
    messages: [
      { role: "system", content: "You are a productivity assistant." },
      { role: "user", content: prompt }
    ],
    model: "meta-llama/llama-4-maverick:free",
    temperature: 1,
    max_tokens: 1024
  });


  const schedule = extractScheduleFromResponse(response.choices?.[0]?.message?.content ?? '');
  return schedule;
};



export async function generateProductivityTip(tasks: Task[]): Promise<string> {

  const response = await client.chat.completions.create({
    messages: [
      { role: "system", content: "You are a productivity expert." },
      {
        role: "user", content: `ржЖржорж╛рж░ ржЖржЬржХрзЗрж░ ржХрж╛ржЬржЧрзБрж▓рзЛржГ \n${tasks.map((task, i) =>
          `${i + 1}. ржХрж╛ржЬрзЗрж░ ржирж╛ржо: ${task.title || "Unnamed Task"} - ржкрзНрж░рж╛ржзрж╛ржирзНржп: ${task.priority || "Medium"}`
        ).join("\n")}\n\nржПржЗ ржХрж╛ржЬржЧрзБрж▓рзЛрж░ ржУржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ ржЖржорж╛ржХрзЗ рззржЯрж╛ ржХрж╛рж░рзНржпржХрж░рзА ржкрзНрж░рзЛржбрж╛ржХрзНржЯрж┐ржнрж┐ржЯрж┐ ржЯрж┐ржкрж╕ ржжрж╛ржУред`
      }
    ],
    model: "meta-llama/llama-4-maverick:free",
    temperature: 0.9,
    max_tokens: 256
  });

  return response.choices?.[0]?.message?.content ?? '';
}

export async function generateFinancialTips(income: FinanceIncome[], expenses: Expenses[]): Promise<string[]> {

  const response = await client.chat.completions.create({
    messages: [
      { role: "system", content: "You are a Financial Advisor expert." },
      { role: "user", content: createFinancePrompt(income, expenses) }
    ],
    model: "meta-llama/llama-4-maverick:free",
    temperature: 0.9,
    max_tokens: 256
  });

  let suggestions = [];
  const rawResponse = response.choices?.[0]?.message?.content ?? '';

  try {
    suggestions = JSON.parse(rawResponse);
  } catch (err) {
    suggestions = rawResponse
      .replace(/^\[|\]$/g, "")
      .split(/"\s*,\s*"/)
      .map(line => line.replace(/^"|"$/g, "").trim())
      .filter(Boolean);
  }

  return suggestions;
}


export async function generateMealPlanAi(dietType: string, budget: string, timeConstraint: string): Promise<{
  mealPlan: MealPlan;
  groceryList: string[];
}> {
  const prompt = `
ржПржХржЬржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЬржирзНржп ржПржХржЯрж┐ рж╕рж╛ржкрзНрждрж╛рж╣рж┐ржХ (рзн ржжрж┐ржирзЗрж░) ржорж┐рж▓ ржкрзНрж▓рзНржпрж╛ржи рждрзИрж░рж┐ ржХрж░рзЛред

- ржкрзНрж░рждрж┐ржжрж┐ржи ржмрзНрж░рзЗржХржлрж╛рж╕рзНржЯ, рж▓рж╛ржЮрзНржЪ ржПржмржВ ржбрж┐ржирж╛рж░ ржерж╛ржХржмрзЗ
- ржкрзНрж░рждрж┐ржЯрж┐ ржорж┐рж▓рзЗрж░ ржЯрж╛ржЗржо ржерж╛ржХржмрзЗ (ржпрзЗржоржи: ${timeConstraint === 'quick' ? 'Under 30 ржорж┐ржирж┐ржЯ' : timeConstraint === 'medium' ? '30-60 ржорж┐ржирж┐ржЯ' : 'No time constraint'})
- ржкрзНрж░рждрж┐ржЯрж┐ ржорж┐рж▓ ${dietType} ржжрж┐рждрзЗ рж╣ржмрзЗ
- ржкрзНрж░рждрж┐ржЯрж┐ ржорж┐рж▓рзЗрж░ ржмрж╛ржЬрзЗржЯ ржерж╛ржХржмрзЗ ${budget} ржПрж░ ржоржзрзНржпрзЗ ржжрж┐рждрзЗ рж╣ржмрзЗ

**рж╕рж╛ржерзЗ ржПржХржЯрж┐ groceries list ржжрж┐ржмрзЗ, ржпрзЗржЧрзБрж▓рзЛ ржР ржЦрж╛ржмрж╛рж░ржЧрзБрж▓рзЛ рж░рж╛ржирзНржирж╛ ржХрж░рждрзЗ рж▓рж╛ржЧржмрзЗред**

ЁЯСЙ JSON Format ржЯрж┐ ржПржХржжржо ржирж┐ржЪрзЗрж░ ржоржд рж╣ржУржпрж╝рж╛ ржЙржЪрж┐ржд ржПржмржВ ржЕржмрж╢рзНржпржЗ рж╕ржорзНржкрзВрж░рзНржг valid JSON рж╣рж┐рж╕рзЗржмрзЗ ржлрзЗрж░ржд ржжрж┐рждрзЗ рж╣ржмрзЗ:

{
  "days": [
    {
      "day": "Monday",
      "meals": [
        { "type": "Breakfast", "name": "ржбрж┐ржо ржкрж░рзЛржЯрж╛", "time": "20 min", "vegetarian": false },
        { "type": "Lunch", "name": "ржорж╛ржЫ ржнрж╛ржЬрж╛ ржУ ржнрж╛ржд", "time": "30 min", "vegetarian": false },
        { "type": "Dinner", "name": "рж╕ржмржЬрж┐ ржЦрж┐ржЪрзБрзЬрж┐", "time": "25 min", "vegetarian": true }
      ]
    },
    ...
  ],
  "grocery_list": [
    "ржЪрж╛рж▓ - рзз ржХрзЗржЬрж┐",
    "ржбрж┐ржо - рзз ржбржЬржи",
    "ржорзБрж░ржЧрж┐ - рзз ржХрзЗржЬрж┐",
    ...
  ]
}

ЁЯУМ **рж╢рзБржзрзБржорж╛рждрзНрж░ ржЙржкрж░рзЗрж░ structure ржЕржирзБржпрж╛рзЯрзА ржкрзБрж░рзЛ valid JSON string ржЖржХрж╛рж░рзЗ ржлрж▓рж╛ржлрж▓ ржжрж╛ржУ, ржХрзЛржирзЛ ржмрзНржпрж╛ржЦрзНржпрж╛ ржмрж╛ ржЕрждрж┐рж░рж┐ржХрзНржд ржЯрзЗржХрзНрж╕ржЯ рж▓рзЗржЦрж╛ ржпрж╛ржмрзЗ ржирж╛ред**
`;


  const response = await client.chat.completions.create({
    model: "meta-llama/llama-4-maverick:free",
    messages: [
      { role: "system", content: "You are a helpful meal planner AI assistant." },
      { role: "user", content: prompt }
    ],
    temperature: 1,
    max_tokens: 2048
  });

  const raw = response.choices?.[0]?.message?.content ?? '';
  let cleanedString = raw.replace(/```json|```/g, '').trim();


  let mealPlan: MealPlan = { days: [] };
  let groceryList: string[] = [];

  try {
    const parsed = JSON.parse(cleanedString)
    mealPlan = { days: parsed.days };
    groceryList = parsed.grocery_list;
  } catch (err) {
    const daysMatch = raw.match(/"days"\s*:\s*\[.*?\](?=\s*,\s*"groceryList")/);
    const groceryMatch = raw.match(/"groceryList"\s*:\s*\[.*?\]/);

    if (daysMatch && groceryMatch) {
      mealPlan = { days: JSON.parse(`{${daysMatch[0]}}`).days };
      groceryList = JSON.parse(`{${groceryMatch[0]}}`).groceryList;
    }
  }



  return {
    mealPlan,
    groceryList,
  };
}


export async function generateRecipeSuggestionsPrompt() {
  
  const prompt =  `
  рждрзБржорж┐ ржПржХржЬржи ржкрзЗрж╢рж╛ржжрж╛рж░ рж╢рзЗржл ржПржмржВ ржирж┐ржЙржЯрзНрж░рж┐рж╢ржи ржПржХрзНрж╕ржкрж╛рж░рзНржЯред
  
  ржПржХржЬржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж░рзЗрж╕рж┐ржкрж┐ ржкржЫржирзНржж: "ржХржо ржХрзНржпрж╛рж▓рзЛрж░рж┐рж░ ржнрзЗржЬ ржЦрж╛ржмрж╛рж░ ржкржЫржирзНржж ржХрж░рж┐"
  
  ржПржЗ рждржерзНржп ржЕржирзБржпрж╛рзЯрзА рзлржЯрж┐ рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ ржПржмржВ рж╕рж╣ржЬ рж░рзЗрж╕рж┐ржкрж┐рж░ рж╕рж╛ржЬрзЗрж╢ржи ржжрж╛ржУред  
  ржкрзНрж░рждрзНржпрзЗржХржЯрж┐ рж░рзЗрж╕рж┐ржкрж┐ ржПржХржЯрж┐ object рж╣ржмрзЗ ржпрж╛рж░ ржоржзрзНржпрзЗ ржерж╛ржХржмрзЗ:
  - title: рж░рзЗрж╕рж┐ржкрж┐рж░ ржирж╛ржо (ржмрж╛ржВрж▓рж╛рзЯ)
  - description: рж░рзЗрж╕рж┐ржкрж┐ржЯрж┐ ржХрзАржнрж╛ржмрзЗ рждрзИрж░рж┐ ржХрж░рж╛ ржпрж╛рзЯ рждрж╛рж░ рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржмрж░рзНржгржирж╛
  
  **Output Format:**  
  ржПржХржЯрж┐ Array of Objects рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЛ ржпрзЗржоржи:
  [
    { "title": "рж╕ржмржЬрж┐ ржЦрж┐ржЪрзБрзЬрж┐", "description": "ржЪрж╛рж▓, ржбрж╛рж▓ ржУ ржорж┐ржХрзНрж╕ржб рж╕ржмржЬрж┐ ржжрж┐рзЯрзЗ рж╕рж╣ржЬрзЗ рж░рж╛ржирзНржирж╛ ржХрж░рж╛ ржпрж╛рзЯ" },
    ...
  ]
  
  рж╢рзБржзрзБ ржПржЗ array ржЯрж╛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЛ, ржмрзНржпрж╛ржЦрзНржпрж╛ ржмрж╛ ржЕржирзНржп ржХрж┐ржЫрзБ ржирзЯред`

  const response = await client.chat.completions.create({
    model: "meta-llama/llama-4-maverick:free",
    messages: [
      { role: "system", content: "рждрзБржорж┐ ржПржХржЬржи ржкрзЗрж╢рж╛ржжрж╛рж░ рж╢рзЗржл ржПржмржВ ржирж┐ржЙржЯрзНрж░рж┐рж╢ржи ржПржХрзНрж╕ржкрж╛рж░рзНржЯ" },
      { role: "user", content: prompt }
    ],
    temperature: 1,
    max_tokens: 1024
  });

  const raw = response.choices?.[0]?.message?.content ?? '';
  return JSON.parse(raw)
}

export async function generateNutritionTipsPrompt() {

  const prompt = `
  рждрзБржорж┐ ржПржХржЬржи ржкрзЗрж╢рж╛ржжрж╛рж░ ржирж┐ржЙржЯрзНрж░рж┐рж╢ржирж┐рж╕рзНржЯред

  ржЖржорж┐ ржЪрж╛ржЗ рзлржЯрж┐ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг Healthy Eating Tips, ржпрзЗржЧрзБрж▓рзЛ ржПржХржЬржи рж╕рж╛ржзрж╛рж░ржг ржорж╛ржирзБрж╖ рждрж╛рж░ ржжрзИржиржирзНржжрж┐ржи ржЬрзАржмржирзЗ ржЕржирзБрж╕рж░ржг ржХрж░рждрзЗ ржкрж╛рж░рзЗред

  **Output Format:**  
  ржПржХржЯрж┐ Array of Strings рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЛ, ржкрзНрж░рждрзНржпрзЗржХржЯрж┐ ржЯрж┐ржкрж╕ ржмрж╛ржВрж▓рж╛рзЯ рж╣ржмрзЗред  
  ржЙржжрж╛рж╣рж░ржг:
  [
    "ржкрзНрж░рждрж┐ржжрж┐ржи рзо ржЧрзНрж▓рж╛рж╕ ржкрж╛ржирж┐ ржкрж╛ржи ржХрж░рзБржи",
    "ржкрзНрж░рждрж┐ржжрж┐ржи ржЕржирзНрждржд ржПржХржЯрж┐ ржлрж▓ ржЦрж╛ржи",
    ...
  ]

  рж╢рзБржзрзБ ржПржЗ array ржЯрж╛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЛ, ржмрзНржпрж╛ржЦрзНржпрж╛ ржмрж╛ ржЕржирзНржп ржХрж┐ржЫрзБ ржирзЯред`

  const response = await client.chat.completions.create({
    model: "meta-llama/llama-4-maverick:free",
    messages: [
      { role: "system", content: "рждрзБржорж┐ ржПржХржЬржи ржкрзЗрж╢рж╛ржжрж╛рж░ ржирж┐ржЙржЯрзНрж░рж┐рж╢ржирж┐рж╕рзНржЯ" },
      { role: "user", content: prompt }
    ],
    temperature: 1,
    max_tokens: 1024
  });

  const raw = response.choices?.[0]?.message?.content ?? '';
  return JSON.parse(raw)
}

export async function analyzeTextDocument(documentText: string) {
  const prompt = `
рждрзБржорж┐ ржПржХржЬржи ржмрзБржжрзНржзрж┐ржорж╛ржи ржбржХрзБржорзЗржирзНржЯ ржмрж┐рж╢рзНрж▓рзЗрж╖ржХред ржЖржорж┐ рждрзЛржорж╛ржХрзЗ ржПржХржЯрж┐ ржбржХрзБржорзЗржирзНржЯрзЗрж░ рж▓рзЗржЦрж╛ ржжрзЗржмрзЛ, ржПржмржВ рждрзБржорж┐ рждрж╛рж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзЗ ржирж┐ржЪрзЗрж░ ржлрж░ржорзНржпрж╛ржЯрзЗ ржЙрждрзНрждрж░ ржжрж┐ржмрзЗ:

# Document Analysis

## Summary
рж▓рж┐ржЦрж╛ржЯрж┐рж░ рж╕рж╛рж░ржорж░рзНржо ржмрж╛ржВрж▓рж╛рзЯ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзЛред

## Key Points
- ржорзВрж▓ ржмрж┐рж╖рзЯржмрж╕рзНрждрзБ ржЧрзБрж▓рзЛрж░ ржкрзЯрзЗржирзНржЯ ржЖржХрж╛рж░рзЗ ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзЛ
- ...

## Suggestions
1. рж▓рзЗржЦрж╛ржЯрж┐ ржЙржирзНржиржд ржХрж░рж╛рж░ ржЬржирзНржп рзй-рзл ржЯрж┐ ржХрж╛рж░рзНржпржХрж░рзА ржкрж░рж╛ржорж░рзНрж╢ ржжрж╛ржУ
2. ржкрж░рж╛ржорж░рзНрж╢ржЧрзБрж▓рзЛ ржЦрзБржм ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржУ ржмрзНржпржмрж╣рж╛рж░ржпрзЛржЧрзНржп рж╣ржУржпрж╝рж╛ ржЙржЪрж┐ржд

ржПржЗ рж╣рж▓рзЛ рж▓рзЗржЦрж╛ржЯрж┐:
"""
${documentText}
"""
`;

const response = await client.chat.completions.create({
  model: "meta-llama/llama-4-maverick:free",
  messages: [
    { role: "system", content: "рждрзБржорж┐ ржПржХржЬржи ржмрзБржжрзНржзрж┐ржорж╛ржи ржбржХрзБржорзЗржирзНржЯ ржмрж┐рж╢рзНрж▓рзЗрж╖ржХ" },
    { role: "user", content: prompt }
  ],
  temperature: 1,
  max_tokens: 1024
});

const raw = response.choices?.[0]?.message?.content ?? '';
return raw
}


export async function solveMathProblem(problemText: string) {
  const prompt = `
рждрзБржорж┐ ржПржХржЬржи ржЕржВржХ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ, ржПржмржВ ржЖржорж┐ рждрзЛржорж╛ржХрзЗ ржПржХржЯрж┐ ржЧржгрж┐ржд рж╕ржорж╕рзНржпрж╛рж░ ржмрж┐ржмрж░ржг ржжрж┐ржмрзЛред рждрзЛржорж╛рж░ ржХрж╛ржЬ рж╣рж▓рзЛ рж╕ржорж╕рзНржпрж╛ржЯрж┐ржХрзЗ ржирж┐ржЪрзЗрж░ ржлрж░ржорзНржпрж╛ржЯрзЗ рж╕рзБржирзНржжрж░ржнрж╛ржмрзЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзЗ рж╕ржорж╛ржзрж╛ржи ржХрж░рж╛:

# Step-by-Step Solution

ржПржЗ ржЕржВржХржЯрж╛ рж╕рзНржЯрзЗржк ржмрж╛ржЗ рж╕рзНржЯрзЗржк рж╕ржорж╛ржзрж╛ржи:

## Step 1: Identify the key variables and equations
(ржПржЗ ржзрж╛ржкрзЗ рж╕ржорж╕рзНржпрж╛рж░ ржорзВрж▓ рж░рж╛рж╢рж┐ржЧрзБрж▓рзЛ рж╢ржирж╛ржХрзНржд ржХрж░рзЛ)

## Step 2: Apply the appropriate mathematical principles
(ржпрзЗ ржирж┐рзЯржо ржмрж╛ рж╕рзВрждрзНрж░ ржкрзНрж░рзЯрзЛржЧ ржХрж░рждрзЗ рж╣ржмрзЗ рждрж╛ рж▓рж┐ржЦрзЛ)

## Step 3: Solve step by step
(ржПржХ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ рж╕ржорж╛ржзрж╛ржи ржХрж░рзЛ)

## Answer:
The solution is: [ржлрж▓рж╛ржлрж▓ рж▓рж┐ржЦрзЛ]

## Explanation:
[рж╕ржорж╛ржзрж╛ржиржЯрж┐ ржХрзЗржи ржПржоржи рж╣рж▓рзЛ, рждрж╛рж░ ржмрзНржпрж╛ржЦрзНржпрж╛ ржмрж╛ржВрж▓рж╛рзЯ рж▓рзЗржЦрзЛ]

ржПржЗ рж╣рж▓рзЛ рж╕ржорж╕рзНржпрж╛ржЯрж┐:
"""
${problemText}
"""
`;

const response = await client.chat.completions.create({
  model: "meta-llama/llama-4-maverick:free",
  messages: [
    { role: "system", content: "рждрзБржорж┐ ржПржХржЬржи ржЕржВржХ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ" },
    { role: "user", content: prompt }
  ],
  temperature: 1,
  max_tokens: 1024
});

const raw = response.choices?.[0]?.message?.content ?? '';
return raw
}

export async function generateEmailFromPrompt(input: string) {
  const prompt = `
рждрзБржорж┐ ржПржХржЬржи ржкрзНрж░ржлрзЗрж╢ржирж╛рж▓ ржЗржорзЗржЗрж▓ рж▓рзЗржЦржХред ржирж┐ржЪрзЗ ржЖржорж┐ ржПржХржЯрж┐ ржЗржиржкрзБржЯ ржжрж┐ржмрзЛ ржПржмржВ рждрзЛржорж╛рж░ ржХрж╛ржЬ рж╣рж▓рзЛ рж╕рзЗржЗ ржЗржиржкрзБржЯ ржЕржирзБржпрж╛рзЯрзА ржПржХржЯрж┐ рж╕ржорзНржкрзВрж░рзНржг ржкрзНрж░ржлрзЗрж╢ржирж╛рж▓ ржЗржорзЗржЗрж▓ рж▓рзЗржЦрж╛ред

ржЗржорзЗржЗрж▓ рж▓рзЗржЦрж╛рж░ ржлрж░ржорзНржпрж╛ржЯ ржирж┐ржЪрзЗрж░ ржорждрзЛ рж╣рждрзЗ рж╣ржмрзЗ:

Subject: [ржЗржорзЗржЗрж▓рзЗрж░ ржмрж┐рж╖рзЯ]

Dear Team,

[ржЗржорзЗржЗрж▓рзЗрж░ ржорзВрж▓ ржмржХрзНрждржмрзНржп рж╕рзБржирзНржжрж░ржнрж╛ржмрзЗ ржЧрзБржЫрж┐рзЯрзЗ рж▓рзЗржЦрзЛ, ржпржерж╛рж╕ржорзНржнржм ржкрзНрж░ржлрзЗрж╢ржирж╛рж▓ ржПржмржВ ржорж╛ржиржмрж┐ржХ ржЯрзЛржирзЗред ржкрзНрж░рзЯрзЛржЬржи рж╣рж▓рзЗ ржкрзЯрзЗржирзНржЯ ржЖржХрж╛рж░рзЗ action items ржжрж╛ржУред]

Looking forward to your response / collaboration.

Best regards,  
[Your Name]

---

ржПржЗ рж╣рж▓рзЛ ржЗржиржкрзБржЯржГ  
"""  
${input}  
"""
`;

const response = await client.chat.completions.create({
  model: "meta-llama/llama-4-maverick:free",
  messages: [
    { role: "system", content: "рждрзБржорж┐ ржПржХржЬржи ржкрзНрж░ржлрзЗрж╢ржирж╛рж▓ ржЗржорзЗржЗрж▓ рж▓рзЗржЦржХ" },
    { role: "user", content: prompt }
  ],
  temperature: 1,
  max_tokens: 1024
});

const raw = response.choices?.[0]?.message?.content ?? '';
console.log(raw);

return raw
}

export async function generateCodeWithExplanation(input: string) {
  const prompt = `
You are an expert software engineer and technical writer.

Based on the following instruction, write the complete code with explanation.

If the user does **not** mention the language, default to **Python**.

If the user mentions a language (like JavaScript, C++, etc.), use that language.

Format the output like this:

\`\`\`[language]
[code goes here]
\`\`\`

Then provide a paragraph explaining what the code does, how it works, and how it can be modified.

---
Here is the instruction:
"""
${input}
"""
`;

const response = await client.chat.completions.create({
  model: "meta-llama/llama-4-maverick:free",
  messages: [
    { role: "system", content: "You are an expert software engineer and technical writer" },
    { role: "user", content: prompt }
  ],
  temperature: 1,
  max_tokens: 1024
});

const raw = response.choices?.[0]?.message?.content ?? '';

return raw
}


export const getAIResponse = async (input:string, id:string) =>{
  const response = await client.chat.completions.create({
    model: id,
    messages: [
      { role: "user", content: input }
    ],
    temperature: 1,
    max_tokens: 2048
  });

  console.log(response, response.choices?.[0]?.message?.content)
  
  const raw = response.choices?.[0]?.message?.content ?? '';

  return raw
}

