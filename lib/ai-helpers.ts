import type { Expenses, FinanceIncome, Task } from "@/lib/types"
import OpenAI from "openai";
import { extractScheduleFromResponse } from "@/lib/utils";

const client = new OpenAI({
  baseURL: 'https://openrouter.ai/api/v1',
  apiKey: process.env.NEXT_PUBLIC_APP_TOKEN,
  dangerouslyAllowBrowser: true,
});


const taskPrompt = (tasks: Task[]) => `
‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ï‡¶æ‡¶ú‡¶ó‡ßÅ‡¶≤‡ßã ‡¶®‡¶ø‡¶ö‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã:

${tasks.map((task, i) =>
  `${i + 1}. ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ: ${task.title || "Unnamed Task"} - ‡¶™‡ßç‡¶∞‡¶æ‡¶ß‡¶æ‡¶®‡ßç‡¶Ø: ${task.priority || "Medium"}`
).join("\n")}

‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¶‡¶ø‡ßü‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶™‡ßÅ‡¶∞‡ßã ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞‡ßÄ ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶∏‡¶æ‡¶ú‡¶æ‡¶ì‡•§ Deep work, break, light task, meeting ‡¶∏‡¶¨ include ‡¶ï‡¶∞‡ßã‡•§
Schedule array of strings ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶¶‡¶æ‡¶ì‡•§
`;

export const createFinancePrompt = (income: FinanceIncome[] , expenses:Expenses[]) => {
  const incomeText = income.map(
    (i, idx) => `${idx + 1}. ${i.source} - ${i.amount} ‡¶ü‡¶æ‡¶ï‡¶æ - ${i.date}`
  ).join("\n");

  const expenseText = expenses.map(
    (e, idx) => `${idx + 1}. ${e.category} - ${e.amount} ‡¶ü‡¶æ‡¶ï‡¶æ - ${e.date}`
  ).join("\n");

  return `
‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶Ø‡¶º ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶Ø‡¶º‡ßá‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶®‡¶ø‡¶ö‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã:

‡¶Ü‡ßü‡¶É
${incomeText}

‡¶¨‡ßç‡¶Ø‡¶Ø‡¶º‡¶É
${expenseText}

‡¶è‡¶á ‡¶°‡¶æ‡¶ü‡¶æ‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶Ü‡¶∞‡ßç‡¶•‡¶ø‡¶ï ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡¶æ‡¶ì‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®‡¶É 
- ‡¶Ü‡¶Æ‡¶ø ‡¶ï‡ßã‡¶•‡¶æ‡¶Ø‡¶º ‡¶ñ‡¶∞‡¶ö ‡¶ï‡¶Æ‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?
- ‡¶ï‡ßã‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø‡¶§‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶ñ‡¶∞‡¶ö ‡¶π‡¶ö‡ßç‡¶õ‡ßá?
- ‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡¶§‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ú‡ßá‡¶ü‡¶ø‡¶Ç ‡¶ü‡¶ø‡¶™‡¶∏ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã?

‡ß™-‡ß´‡¶ü‡¶ø ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡¶æ‡¶ì, ‡¶Ø‡¶æ‡¶§‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡¶π‡¶ú‡ßá ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§ array of strings ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶¶‡¶æ‡¶ì`
}

export const generateAISchedule = async (tasks: Task[]) => {

  return

  const prompt = taskPrompt(tasks);
 
  const response = await client.chat.completions.create({
    messages: [
      { role: "system", content: "You are a productivity assistant." },
      { role: "user", content: prompt }
    ],
    model: "gpt-4o",
    temperature: 1,
    max_tokens: 1024
  });

  const schedule = extractScheduleFromResponse(response.choices?.[0]?.message?.content ?? '');
  return schedule;
};



export async function generateProductivityTip(tasks: Task[]): Promise<string> {

  return

  
  const response = await client.chat.completions.create({
    messages: [
      { role: "system", content: "You are a productivity expert." },
      { role: "user", content: `‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ï‡¶æ‡¶ú‡¶ó‡ßÅ‡¶≤‡ßã‡¶É \n${tasks.map((task, i) =>
        `${i + 1}. ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ: ${task.title || "Unnamed Task"} - ‡¶™‡ßç‡¶∞‡¶æ‡¶ß‡¶æ‡¶®‡ßç‡¶Ø: ${task.priority || "Medium"}`
      ).join("\n")}\n\n‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶ì‡¶™‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡ßß‡¶ü‡¶æ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞‡ßÄ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡¶ø‡¶≠‡¶ø‡¶ü‡¶ø ‡¶ü‡¶ø‡¶™‡¶∏ ‡¶¶‡¶æ‡¶ì‡•§` }
    ],
    model: "gpt-4o",
    temperature: 0.9,
    max_tokens: 256
  });

  return response.choices?.[0]?.message?.content ?? '';
}

export async function generateFinancialTips(income: FinanceIncome[] , expenses:Expenses[]): Promise<string[]> {
  
  return
  const response = await client.chat.completions.create({
    messages: [
      { role: "system", content: "You are a Financial Advisor expert." },
      { role: "user", content: createFinancePrompt(income, expenses)}
    ],
    model: "gpt-4o",
    temperature: 0.9,
    max_tokens: 256
  });

  let suggestions = [];
  const rawResponse = response.choices?.[0]?.message?.content ?? '';

  try {
  suggestions = JSON.parse(rawResponse);
  } catch (err) {
    suggestions = rawResponse
      .replace(/^\[|\]$/g, "") 
      .split(/"\s*,\s*"/) 
      .map(line => line.replace(/^"|"$/g, "").trim()) 
      .filter(Boolean);
}

  return suggestions;
}


export async function generateMealPlanAi(dietType:string, budget:string, timeConstraint:string): Promise<{
  mealPlan: MealPlan;
  groceryList: string[];
}> {
  const prompt = `
‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶™‡ßç‡¶§‡¶æ‡¶π‡¶ø‡¶ï (‡ß≠ ‡¶¶‡¶ø‡¶®‡ßá‡¶∞) ‡¶Æ‡¶ø‡¶≤ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã‡•§

- ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‡¶¨‡ßç‡¶∞‡ßá‡¶ï‡¶´‡¶æ‡¶∏‡ßç‡¶ü, ‡¶≤‡¶æ‡¶û‡ßç‡¶ö ‡¶è‡¶¨‡¶Ç ‡¶°‡¶ø‡¶®‡¶æ‡¶∞ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
- ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶Æ‡¶ø‡¶≤‡ßá‡¶∞ ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá (‡¶Ø‡ßá‡¶Æ‡¶®: ${timeConstraint === 'quick' ? 'Under 30 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü' : timeConstraint === 'medium' ?  '30-60 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü' : 'No time constraint'})
- ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶Æ‡¶ø‡¶≤ ${dietType} ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá
- ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶Æ‡¶ø‡¶≤‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ú‡ßá‡¶ü ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ${budget} ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá

**‡¶∏‡¶æ‡¶•‡ßá ‡¶è‡¶ï‡¶ü‡¶ø groceries list ‡¶¶‡¶ø‡¶¨‡ßá, ‡¶Ø‡ßá‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ê ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∞‡¶æ‡¶®‡ßç‡¶®‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá‡•§**

üëâ JSON Format ‡¶ü‡¶ø ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Æ‡¶§ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶â‡¶ö‡¶ø‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ valid JSON ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá:

{
  "days": [
    {
      "day": "Monday",
      "meals": [
        { "type": "Breakfast", "name": "‡¶°‡¶ø‡¶Æ ‡¶™‡¶∞‡ßã‡¶ü‡¶æ", "time": "20 min", "vegetarian": false },
        { "type": "Lunch", "name": "‡¶Æ‡¶æ‡¶õ ‡¶≠‡¶æ‡¶ú‡¶æ ‡¶ì ‡¶≠‡¶æ‡¶§", "time": "30 min", "vegetarian": false },
        { "type": "Dinner", "name": "‡¶∏‡¶¨‡¶ú‡¶ø ‡¶ñ‡¶ø‡¶ö‡ßÅ‡ßú‡¶ø", "time": "25 min", "vegetarian": true }
      ]
    },
    ...
  ],
  "grocery_list": [
    "‡¶ö‡¶æ‡¶≤ - ‡ßß ‡¶ï‡ßá‡¶ú‡¶ø",
    "‡¶°‡¶ø‡¶Æ - ‡ßß ‡¶°‡¶ú‡¶®",
    "‡¶Æ‡ßÅ‡¶∞‡¶ó‡¶ø - ‡ßß ‡¶ï‡ßá‡¶ú‡¶ø",
    ...
  ]
}

üìå **‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶â‡¶™‡¶∞‡ßá‡¶∞ structure ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶™‡ßÅ‡¶∞‡ßã valid JSON string ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶¶‡¶æ‡¶ì, ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡¶æ ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§**
`;


  const response = await client.chat.completions.create({
    model: "meta-llama/llama-4-maverick:free",
    messages: [
      { role: "system", content: "You are a helpful meal planner AI assistant." },
      { role: "user", content: prompt }
    ],
    temperature: 1,
    max_tokens: 2048
  });

  const raw = response.choices?.[0]?.message?.content ?? '';
  let cleanedString = raw.replace(/```json|```/g, '').trim();


  let mealPlan: MealPlan = { days: [] };
  let groceryList: string[] = [];

  try {
    const parsed = JSON.parse(cleanedString)
    mealPlan = { days: parsed.days };
    groceryList = parsed.grocery_list;
  } catch (err) {
    const daysMatch = raw.match(/"days"\s*:\s*\[.*?\](?=\s*,\s*"groceryList")/);
    const groceryMatch = raw.match(/"groceryList"\s*:\s*\[.*?\]/);

    if (daysMatch && groceryMatch) {
      mealPlan = { days: JSON.parse(`{${daysMatch[0]}}`).days };
      groceryList = JSON.parse(`{${groceryMatch[0]}}`).groceryList;
    }
  }

  

  return {
    mealPlan,
    groceryList,
  };
}
